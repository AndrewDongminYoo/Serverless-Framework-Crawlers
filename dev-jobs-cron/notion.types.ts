'use strict';

// Generated by https://quicktype.io

declare type noColor = "default";

export interface Pages {
    parent: Parent;
    properties: PageStats;
};

export type Parent = {
    database_id: string;
} | {
    page_id: string;
} | {
    block_id: string;
} | {
    workspace: true;
};

export type Platform = '원티드' | '로켓펀치';

export type SelectRequest = {
    id: string;
    name?: string;
    color?: noColor | SelectColor;
} | null | {
    name: string;
    id?: string;
    color?: noColor | SelectColor;
};

export type Annotations = {
    bold: boolean;
    italic: boolean;
    strikethrough: boolean;
    underline: boolean;
    code: boolean;
    color: noColor | AnnotationColor;
};


type PageProperties = {
    title: Array<TextRichTextItem>;
    type?: "title";
} | {
    rich_text: Array<TextRichTextItem>;
    type?: "rich_text";
} | {
    number: number | null;
    type?: "number";
} | {
    url: string | null;
    type?: "url";
} | {
    select: SelectRequest;
    type?: "select";
} | {
    multi_select: Array<SelectRequest>;
    type?: "multi_select";
} | {
    email: string | null;
    type?: "email";
} | {
    phone_number: string | null;
    type?: "phone_number";
} | {
    checkbox: boolean;
    type?: "checkbox";
} | {
    files: Array<{
        file: {
            url: string;
            expiry_time?: string;
        };
        name: string;
        type?: "file";
    } | {
        external: {
            url: string;
        };
        name: string;
        type?: "external";
    }>;
    type?: "files";
} | {
    content: string;
    link: {
        url: string;
    } | null;
    type?: "text";
};

export declare type TextRichTextItem = {
    type?: "text";
    text: {
        content: string;
        link: {
            url: string;
        } | null;
    };
    annotations: Annotations;
    plain_text: string;
    href: string | null;
};

/** TypeScript Type Def Utils */

type Request<T> = Extract<PageProperties, { type?: T }>;

export type Removed<T, Drop = "remove"> = T extends object ? {
    [K in Exclude<keyof T, Drop>]: Removed<T[K], Drop>;
} : T;

export type PickProperty<K extends Object, T extends string> = Extract<K, { type: T }>;

export type ArrayElement<ArrayType extends readonly unknown[]> =
    ArrayType extends readonly (infer ElementType)[] ? ElementType : never;

type Background<Color extends string> = `${Color}_background`;

/** TypeScript Type Def Utils */

export interface PageStats {
    URL: NotionURL;
    주요업무: RichText;
    회사타입: MultiSelect;
    회사위치: RichText;
    포지션: RichText;
    우대사항: RichText;
    좋아요: Numeric;
    기술스택: MultiSelect;
    회사설명: RichText;
    썸네일: NotionFile;
    혜택및복지: RichText;
    자격요건: RichText;
    회사명: RichText;
    분야: NotionSelect;
    응답률: Numeric;
    아이디: NotionTitle;
};

export type Prop = keyof PageStats;

export type NotionURL = Request<"url">;

export type RichText = Request<"rich_text">;

export type MultiSelect = Request<"multi_select">;

export type NotionSelect = Request<"select">;

export type Numeric = Request<"number">;

export type NotionTitle = Request<"title">;

export type NotionFile = Request<"files">;

export type NotionText = Request<"text">;

export declare type SelectColor = "gray" | "brown" | "orange" | "yellow" | "green" | "blue" | "purple" | "pink" | "red";
export declare type AnnotationColor = noColor | SelectColor | Background<SelectColor>;