// Generated by https://quicktype.io

import { WantedResponse } from "./wanted.res.types";

export interface Response {
    status:                         number;
    statusText:                     string;
    headers:                        Headers;
    config:                         Config;
    _eventsCount:                   number;
    _maxListeners:                  null;
    outputSize:                     number;
    writable:                       boolean;
    destroyed:                      boolean;
    _last:                          boolean;
    chunkedEncoding:                boolean;
    shouldKeepAlive:                boolean;
    maxRequestsOnConnectionReached: boolean;
    _defaultKeepAlive:              boolean;
    useChunkedEncodingByDefault:    boolean;
    sendDate:                       boolean;
    _removedConnection:             boolean;
    _removedContLen:                boolean;
    _removedTE:                     boolean;
    strictContentLength:            boolean;
    _contentLength:                 number;
    _hasBody:                       boolean;
    _trailer:                       string;
    finished:                       boolean;
    _headerSent:                    boolean;
    _closed:                        boolean;
    socket:                         Socket;
    _header:                        { [key: string]: string };
    _keepAliveTimeout:              number;
    agent:                          Agent;
    socketPath:                     null;
    method:                         string;
    maxHeaderSize:                  null;
    insecureHTTPParser:             null;
    path:                           string;
    _ended:                         boolean;
    res:                            Res;
    aborted:                        boolean;
    timeoutCb:                      null;
    upgradeOrConnect:               boolean;
    parser:                         null;
    maxHeadersCount:                null;
    reusedSocket:                   boolean;
    host:                           string;
    protocol:                       string;
    data:                           WantedResponse;
    _redirectable:                  Redirectable;
}

export interface Redirectable {
    _eventsCount:        number;
    _maxListeners:       null;
    _ended:              boolean;
    _ending:             boolean;
    _redirectCount:      number;
    _requestBodyLength:  number;
    _currentUrl:         string;
}

export interface Agent {
    _eventsCount:      number;
    _maxListeners:     null;
    defaultPort:       number;
    protocol:          string;
    keepAliveMsecs:    number;
    keepAlive:         boolean;
    maxFreeSockets:    number;
    scheduling:        string;
    totalSocketCount:  number;
    maxCachedSessions: number;
}

export interface Config {
    transitional:     Transitional;
    timeout:          number;
    xsrfCookieName:   string;
    xsrfHeaderName:   string;
    maxContentLength: number;
    maxBodyLength:    number;
    headers:          { [key: string]: string };
    baseURL:          string;
    url:              string;
    params:           Params;
    method:           string;
    data:             null;
}

export interface Params {
    country:      string;
    tag_type_ids: number;
    job_sort:     string;
    locations:    string;
    years:        number;
}

export interface Transitional {
    silentJSONParsing:   boolean;
    forcedJSONParsing:   boolean;
    clarifyTimeoutError: boolean;
}

export interface Headers {
    date:                   string;
    "content-type":         string;
    "transfer-encoding":    string;
    connection:             string;
    server:                 string;
    vary:                   string;
    "x-wanted-simsmode":    string;
    "x-wanted-expire-time": string;
}

export interface Res {
    _eventsCount:     number;
    _maxListeners:    null;
    httpVersionMajor: number;
    httpVersionMinor: number;
    httpVersion:      string;
    complete:         boolean;
    aborted:          boolean;
    upgrade:          boolean;
    url:              string;
    method:           null;
    statusCode:       number;
    statusMessage:    string;
    _consuming:       boolean;
    _dumped:          boolean;
    responseUrl:      string;
}

export interface Socket {
    _secureEstablished:       boolean;
    _securePending:           boolean;
    _newSessionPending:       boolean;
    _controlReleased:         boolean;
    secureConnecting:         boolean;
    _SNICallback:             null;
    servername:               string;
    alpnProtocol:             boolean;
    authorized:               boolean;
    authorizationError:       null;
    encrypted:                boolean;
    _eventsCount:             number;
    connecting:               boolean;
    _hadError:                boolean;
    _parent:                  null;
    _host:                    string;
    _closeAfterHandlingError: boolean;
    _maxListeners:            null;
    allowHalfOpen:            boolean;
    _sockname:                null;
    _pendingData:             null;
    _pendingEncoding:         string;
    server:                   null;
    _server:                  null;
    ssl:                      null;
    _requestCert:             boolean;
    _rejectUnauthorized:      boolean;
    parser:                   null;
}
